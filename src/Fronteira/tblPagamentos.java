package Fronteira;

import Controle.ClsAcai;
import Controle.ClsBairros;
import Controle.ClsComplemento;
import Controle.ClsPedido;
import Controle.ClsVitamina;
import Persistencia.PerAcai;
import Persistencia.PerBairros;
import Persistencia.PerComplemento;
import Persistencia.PerPedido;
import Persistencia.PerRelacional;
import Persistencia.PerVitamina;
import java.util.List;
import javax.swing.JOptionPane;
import java.awt.Graphics;
import java.awt.Image;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.TimeZone;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.JobName;
import javax.print.attribute.standard.MediaSizeName;
import javax.print.attribute.standard.OrientationRequested;
import javax.swing.ImageIcon;

public class tblPagamentos extends javax.swing.JFrame {

    int CodBairrosId;
    double total = 0;
    String dataN, horaN;

    List<String> prod2 = new ArrayList();
    List<String> sab = new ArrayList();
    List<String> tam = new ArrayList();
    List<String> comp2 = new ArrayList();
    List<String> obs = new ArrayList();
    List<String> val = new ArrayList();

    public tblPagamentos() {
        initComponents();
    }

    public tblPagamentos(List<String> produto_nome, List<String> sabor_nome, List<String> tamanho_nome, List<String> complementos, List<String> observacoes, List<String> valor, double total) {
        initComponents();

        prod2 = produto_nome;
        sab = sabor_nome;
        tam = tamanho_nome;
        comp2 = complementos;
        obs = observacoes;
        val = valor;

        //Date hoje = new Date();
        SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        df.setTimeZone(TimeZone.getTimeZone("GMT-3"));

        txtDATE.setText(df.format(new Date()));

        preencherBairros();

        txtValor.setText(total + "");
        txtTotal.setText(total + "");

        //variaveis para ser usado no código da impressora
        SimpleDateFormat data = new SimpleDateFormat("dd/MM/yyyy");
        data.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        dataN = data.format(new Date());

        //hora
        SimpleDateFormat hora = new SimpleDateFormat("H:mm");
        hora.setTimeZone(TimeZone.getTimeZone("GMT-3"));
        horaN = hora.format(new Date());

        InicioMDI teste = new InicioMDI();

        TlNovoPedido teste2;
        teste2 = new TlNovoPedido(teste);

        teste.setVisible(true);
        teste.setContentPane(teste2);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBack = new javax.swing.JPanel(){
            public void paintComponent(Graphics g){
                ImageIcon im = new ImageIcon ("src\\Imagens\\back6.jpg");
                Image i = im.getImage();

                g.drawImage(i, 0, 0, this.getSize().width, this.getSize().height, this);
            }
        };
        lblPagamento = new javax.swing.JLabel();
        lblEmbalar = new javax.swing.JLabel();
        cbxEmbalar = new javax.swing.JComboBox<>();
        lbRetirada = new javax.swing.JLabel();
        cbxRetirada = new javax.swing.JComboBox<>();
        cbxPagamento = new javax.swing.JComboBox<>();
        lbPagamento = new javax.swing.JLabel();
        lblBairro = new javax.swing.JLabel();
        cbxBairro = new javax.swing.JComboBox<>();
        lblTaxa = new javax.swing.JLabel();
        txtTaxa = new javax.swing.JTextField();
        lblEndereco = new javax.swing.JLabel();
        txtEndereco = new javax.swing.JTextField();
        lblTelefone = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        lblNome = new javax.swing.JLabel();
        lblValPed = new javax.swing.JLabel();
        lblValTotal = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        txtTotal = new javax.swing.JTextField();
        btnOk = new javax.swing.JButton();
        txtOutra = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtDATE = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        txtResidencia = new javax.swing.JTextField();
        txtTelefone = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pagamento");
        setMaximumSize(new java.awt.Dimension(800, 600));
        setResizable(false);

        pnlBack.setBackground(new java.awt.Color(204, 204, 224));

        lblPagamento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPagamento.setText("Pagamento:");

        lblEmbalar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblEmbalar.setText("Embalar:");

        cbxEmbalar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbxEmbalar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione:", "Sim", "Não" }));

        lbRetirada.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbRetirada.setText("Retirada:");

        cbxRetirada.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbxRetirada.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione:", "Balcão", "Entrega" }));
        cbxRetirada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxRetiradaActionPerformed(evt);
            }
        });

        cbxPagamento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbxPagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione:", "Dinheiro", "Cartão de crédito", "Cartão de débito", "Picpay", "Outro" }));
        cbxPagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPagamentoActionPerformed(evt);
            }
        });

        lbPagamento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbPagamento.setText("Pagamento:");

        lblBairro.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblBairro.setText("Bairro:");

        cbxBairro.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbxBairro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione:" }));
        cbxBairro.setEnabled(false);
        cbxBairro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxBairroActionPerformed(evt);
            }
        });

        lblTaxa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTaxa.setText("Taxa:");

        txtTaxa.setEditable(false);
        txtTaxa.setEnabled(false);

        lblEndereco.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblEndereco.setText("Endereço:");

        txtEndereco.setEditable(false);

        lblTelefone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTelefone.setText("Telefone:");

        lblNome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblNome.setText("Nome:");

        lblValPed.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblValPed.setText("Valor do pedido:");

        lblValTotal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblValTotal.setText("Valor Total a Pagar");

        txtValor.setEditable(false);
        txtValor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtValor.setEnabled(false);

        txtTotal.setEditable(false);
        txtTotal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTotal.setEnabled(false);

        btnOk.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnOk.setText("Finalizar pedidos");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        txtOutra.setEditable(false);

        jLabel1.setText("Data do pedido");

        txtDATE.setEditable(false);
        txtDATE.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtDATE.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Nº Residência");

        txtResidencia.setEditable(false);

        txtTelefone.setEditable(false);
        try {
            txtTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) #####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtTelefone.setEnabled(false);

        javax.swing.GroupLayout pnlBackLayout = new javax.swing.GroupLayout(pnlBack);
        pnlBack.setLayout(pnlBackLayout);
        pnlBackLayout.setHorizontalGroup(
            pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBackLayout.createSequentialGroup()
                        .addComponent(lblEmbalar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxEmbalar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbPagamento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtOutra))
                    .addGroup(pnlBackLayout.createSequentialGroup()
                        .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBackLayout.createSequentialGroup()
                                .addComponent(lblPagamento)
                                .addGap(388, 388, 388)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(pnlBackLayout.createSequentialGroup()
                                    .addComponent(lblValPed)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                                    .addComponent(lblValTotal)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlBackLayout.createSequentialGroup()
                                    .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lbRetirada)
                                        .addComponent(lblBairro))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlBackLayout.createSequentialGroup()
                                            .addComponent(cbxBairro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGap(18, 18, 18)
                                            .addComponent(lblTaxa)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txtTaxa, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(lblTelefone)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(pnlBackLayout.createSequentialGroup()
                                            .addComponent(cbxRetirada, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(0, 0, Short.MAX_VALUE))))
                                .addGroup(pnlBackLayout.createSequentialGroup()
                                    .addComponent(lblEndereco)
                                    .addGap(393, 393, 393)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtResidencia))
                                .addGroup(pnlBackLayout.createSequentialGroup()
                                    .addComponent(lblNome)
                                    .addGap(32, 32, 32)
                                    .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtEndereco, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                                        .addComponent(txtNome)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(pnlBackLayout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addComponent(btnOk)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBackLayout.setVerticalGroup(
            pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPagamento)
                    .addComponent(jLabel1)
                    .addComponent(txtDATE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtOutra, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblEmbalar)
                        .addComponent(cbxEmbalar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbPagamento)
                        .addComponent(cbxPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbRetirada)
                    .addComponent(cbxRetirada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBairro)
                    .addComponent(cbxBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTaxa)
                    .addComponent(txtTaxa, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelefone)
                    .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEndereco)
                    .addComponent(txtEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtResidencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNome))
                .addGap(33, 33, 33)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblValPed)
                    .addComponent(lblValTotal)
                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnOk)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cbxRetiradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxRetiradaActionPerformed

        int selected = cbxRetirada.getSelectedIndex();

        if (selected == 2) {
            enableComponents(true);
        } else {
            enableComponents(false);
        }

    }//GEN-LAST:event_cbxRetiradaActionPerformed

    private void cbxPagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPagamentoActionPerformed

        String selected = cbxPagamento.getSelectedItem() + "";

        if (selected.equals("Outro")) {
            JOptionPane.showMessageDialog(null, "Escreva a outra forma de pagamento no campo de texto ao lado");
            txtOutra.setEditable(true);
        } else {
            txtOutra.setEditable(false);
        }

    }//GEN-LAST:event_cbxPagamentoActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        int embalar = cbxEmbalar.getSelectedIndex();
        int pgmt = cbxPagamento.getSelectedIndex();
        int retirada = cbxRetirada.getSelectedIndex();
        int bairro = cbxBairro.getSelectedIndex();
        String endereco = txtEndereco.getText();
        String res = txtResidencia.getText();
        String nome = txtNome.getText();
        total = Double.parseDouble(txtTotal.getText());

        if (embalar == 0 || pgmt == 0 || retirada == 0 || nome.equals("") || ((pgmt == 5) && txtOutra.getText().equals(""))) {
            infoBox("Verifique se você escolheu uma opção para 'embalar', 'pagamento' ou 'retirada'.\nVerifique se o campo 'nome' não está em branco.\nVerifique se você escreveu a outra forma de pagamento.", "Erro ao confirmar");
        } else if (retirada == 2) { //entrega, motoboy //1-balcão 2-motoboy
            if (bairro == 0 || endereco.equals("") || res.equals("")) {
                infoBox("Verifique se os campos Bairros, Endereço e Residência estão preenchidos.", "Erro ao confirmar");
            } else {

                //função de entrega(motoboy)
                //código da impressora para o motoboy
                String conteudoImprimir = "";

                //Percorrer os produtos vendidos
                for (int i = 0; i < prod2.size(); i++) {

                    if (prod2.get(i).equals("Açaí")) {

                        conteudoImprimir += "Acai" + "\t\t\t\t" + val.get(i) + " \n";
                    } else {
                        conteudoImprimir += prod2.get(i) + "\t\t\t" + val.get(i) + " \n";
                    }
                    conteudoImprimir += "Obs: " + obs.get(i) + "\n\n";
                }

                //enviar para a função de imprimir
                this.imprimir(
                        "            SKINA DO ACAI\n"
                        + "--------------------------------------\n"
                        + "            CUPOM NAO FISCAL       \n"
                        + "--------------------------------------\n"
                        + "DESCRIÇAO\t\t\tPREÇO\n"
                        + conteudoImprimir
                        + "--------------------------------------\n"
                        + "TOTAL\t\t\t\t" + txtTotal.getText() + "\n"
                        + "--------------------------------------\n"
                        + txtNome.getText() + "\t  " + txtTelefone.getText() + "\n"
                        + cbxBairro.getSelectedItem() + "\n"
                        + txtEndereco.getText() + "\n"
                        + "Nº: " + txtResidencia.getText() + "\n"
                        + "Forma de pagamento: " + cbxPagamento.getSelectedItem() + "\n"
                        + txtOutra.getText() + "\n"
                        + dataN + " - " + horaN + "\n"
                        + "--------------------------------------\n"
                        + "AGRADECEMOS A PREFERENCIA\nVOLTE SEMPRE\n"
                        + "\f" //fechar a folha  
                );

                //código da impressora para a cozinha
                String conteudoImprimirC = "";

                //Percorrer os produtos vendidos
                for (int i = 0; i < prod2.size(); i++) {

                    if (prod2.get(i).equals("Açaí")) {
                        conteudoImprimirC += "Acai" + " - " + tam.get(i) + "\n";

                    } else {
                        conteudoImprimirC += prod2.get(i) + "\n" + sab.get(i) + "\n";
                    }

                    int pos = 0;
                    int cont = 0;
                    for (; pos < comp2.size(); pos++) {
                        if (cont == i && !comp2.get(pos).equals("---")) {
                            conteudoImprimirC += comp2.get(pos) + "\n";
                        }

                        if (comp2.get(pos).equals("---")) {
                            cont++;
                        }

                    }

                    conteudoImprimirC += "\nObs: " + obs.get(i) + "\n--------------------------------------\n";

                }

                //enviar para a função de imprimir
                this.imprimir("            SKINA DO ACAI\n"
                        + "--------------------------------------\n"
                        + "            CUPOM NAO FISCAL       \n"
                        + "--------------------------------------\n"
                        + "Pedido(s): \n"
                        + conteudoImprimirC + "\n"
                        + "--------------------------------------\n"
                        + "TOTAL\t\t\t\t" + txtValor.getText() + "\n"
                        + "--------------------------------------\n"
                        + "Cliente: " + txtNome.getText() + "\n"
                        + "Embalar: " + cbxEmbalar.getSelectedItem() + "\n"
                        + "Forma de pagamento: " + cbxPagamento.getSelectedItem() + "\n"
                        + txtOutra.getText() + "\n"
                        + dataN + " - " + horaN + "\n"
                        + "--------------------------------------\n"
                        + "AGRADECEMOS A PREFERENCIA\nVOLTE SEMPRE\n"
                        + "\f" //fechar a folha  
                );

                //código dos pedido em andamento
                //1º tbPedido
                ClsPedido addPedido = new ClsPedido();
                addPedido.setNome(txtNome.getText());
                addPedido.setData(txtDATE.getText());
                addPedido.setValor(Double.parseDouble(txtValor.getText()));

                PerPedido.InserirPedido(addPedido);

                //2º Pegar codPedido
                int codPedido = PerPedido.CodPedido();

                //3º Inserir todo o pedido e seus complementos no banco     
                for (int i = 0; i < prod2.size(); i++) {
                    int codProduto = 0;
                    String prodS = prod2.get(i);
                    String tam_sab = "";

                    if (prodS.equals("Açaí")) {
                        PerAcai perAcai = new PerAcai();
                        ArrayList<ClsAcai> acai2 = new PerAcai().TodosAcai();
                        for (ClsAcai p : acai2) {
                            if (tam.get(i).equals(p.getTamanho())) {
                                codProduto = p.getCod();
                            }
                        }

                    } else {
                        PerVitamina perVit = new PerVitamina();
                        ArrayList<ClsVitamina> vit = new PerVitamina().TodasVitaminas();
                        for (ClsVitamina p : vit) {
                            if (sab.get(i).equals(p.getTipo() + ": " + p.getNome())) {
                                codProduto = p.getCod();
                            }
                        }

                    }

                    PerRelacional.InserirPTP(codPedido, codProduto);

                    int rowCount = 0;
                    int teste = 0;
                    String nome3 = null;
                    for (int j = 0; j < comp2.size(); j++) {
                        if (comp2.get(j).equals("---")) {
                            rowCount++;
                        } else if (rowCount == i) {

                            PerComplemento perComp = new PerComplemento();
                            ArrayList<ClsComplemento> complemento2 = new PerComplemento().TodosComplemento();
                            for (ClsComplemento p : complemento2) {
                                if (comp2.get(j).equals(p.getNome())) {
                                    teste = p.getCod();
                                    nome3 = p.getNome();
                                }
                            }
                            PerRelacional.InserirPTPTC(codPedido, codProduto, teste);
                        }
                    }

                }
                JOptionPane.showMessageDialog(null, "Incluido com SUCESSO :)");

            }

        } else {

            //código da impressora para a cozinha
            String conteudoImprimir = "";

            //Percorrer os produtos vendidos
            for (int i = 0; i < prod2.size(); i++) {

                if (prod2.get(i).equals("Açaí")) {
                    conteudoImprimir += "Acai" + " - " + tam.get(i) + "\n";

                } else {
                    conteudoImprimir += prod2.get(i) + "\n" + sab.get(i) + "\n";
                }

                int pos = 0;
                int cont = 0;
                for (; pos < comp2.size(); pos++) {
                    if (cont == i && !comp2.get(pos).equals("---")) {
                        conteudoImprimir += comp2.get(pos) + "\n";
                    }

                    if (comp2.get(pos).equals("---")) {
                        cont++;
                    }

                }

                conteudoImprimir += "\nObs: " + obs.get(i) + "\n--------------------------------------\n";

            }

            //enviar para a função de imprimir
            this.imprimir(
                    "            SKINA DO ACAI\n"
                    + "--------------------------------------\n"
                    + "            CUPOM NAO FISCAL       \n"
                    + "--------------------------------------\n"
                    + "Pedido(s): \n"
                    + conteudoImprimir + "\n"
                    + "--------------------------------------\n"
                    + "TOTAL\t\t\t\t" + txtValor.getText() + "\n"
                    + "--------------------------------------\n"
                    + "Cliente: " + txtNome.getText() + "\n"
                    + "Embalar: " + cbxEmbalar.getSelectedItem() + "\n"
                    + "Forma de pagamento: " + cbxPagamento.getSelectedItem() + "\n"
                    + txtOutra.getText() + "\n"
                    + dataN + " - " + horaN + "\n"
                    + "--------------------------------------\n"
                    + "AGRADECEMOS A PREFERENCIA\nVOLTE SEMPRE\n"
                    + "\f" //fechar a folha  
            );

            //código dos pedido em andamento
            //1º tbPedido
            ClsPedido addPedido = new ClsPedido();
            addPedido.setNome(txtNome.getText());
            addPedido.setData(txtDATE.getText());
            addPedido.setValor(Double.parseDouble(txtValor.getText()));

            PerPedido.InserirPedido(addPedido);

            //2º Pegar codPedido
            int codPedido = PerPedido.CodPedido();

            //3º Inserir todo o pedido e seus complementos no banco     
            for (int i = 0; i < prod2.size(); i++) {
                int codProduto = 0;
                String prodS = prod2.get(i);
                String tam_sab = "";

                if (prodS.equals("Açaí")) {
                    PerAcai perAcai = new PerAcai();
                    ArrayList<ClsAcai> acai2 = new PerAcai().TodosAcai();
                    for (ClsAcai p : acai2) {
                        if (tam.get(i).equals(p.getTamanho())) {
                            codProduto = p.getCod();
                        }
                    }

                } else {
                    PerVitamina perVit = new PerVitamina();
                    ArrayList<ClsVitamina> vit = new PerVitamina().TodasVitaminas();
                    for (ClsVitamina p : vit) {
                        if (sab.get(i).equals(p.getTipo() + ": " + p.getNome())) {
                            codProduto = p.getCod();
                        }
                    }

                }

                PerRelacional.InserirPTP(codPedido, codProduto);

                int rowCount = 0;
                int teste = 0;
                String nome3 = null;
                for (int j = 0; j < comp2.size(); j++) {
                    if (comp2.get(j).equals("---")) {
                        rowCount++;
                    } else if (rowCount == i) {

                        PerComplemento perComp = new PerComplemento();
                        ArrayList<ClsComplemento> complemento2 = new PerComplemento().TodosComplemento();
                        for (ClsComplemento p : complemento2) {
                            if (comp2.get(j).equals(p.getNome())) {
                                teste = p.getCod();
                                nome3 = p.getNome();
                            }
                        }
                        PerRelacional.InserirPTPTC(codPedido, codProduto, teste);
                    }
                }

            }
            JOptionPane.showMessageDialog(null, "Incluido com SUCESSO :)");

        }

        prod2.clear();
        sab.clear();
        tam.clear();
        comp2.clear();
        obs.clear();
        val.clear();

        this.dispose();

    }//GEN-LAST:event_btnOkActionPerformed

    private void cbxBairroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxBairroActionPerformed
        String bairro = cbxBairro.getSelectedItem().toString();

        if (!"Selecione:".equals(bairro)) {
            PerBairros perBairro = new PerBairros();
            ArrayList<ClsBairros> bairros = new PerBairros().TodosBairros();
            for (ClsBairros p : bairros) {
                if (bairro.equals(p.getNome())) {
                    txtTaxa.setText(p.getPreco() + "");
                    txtTotal.setText((Double.parseDouble(txtValor.getText()) + Double.parseDouble(txtTaxa.getText())) + "");
                    CodBairrosId = p.getCod();
                }
            }
        } else {
            txtTaxa.setText("");
            txtTotal.setText(txtValor.getText());
        }

    }//GEN-LAST:event_cbxBairroActionPerformed

    private void enableComponents(boolean enable) {

        cbxBairro.setEnabled(enable);

        txtEndereco.setEditable(enable);
        txtEndereco.setEnabled(enable);

        txtResidencia.setEditable(enable);
        txtResidencia.setEnabled(enable);

        txtTelefone.setEditable(enable);
        txtTelefone.setEnabled(enable);

        if (enable == false) {
            cbxBairro.setSelectedIndex(0);
            txtTaxa.setText("");

            txtEndereco.setText("");

            txtResidencia.setText("");

            txtTelefone.setText("");
        }

    }

    private void infoBox(String infoMessage, String titleBar) {
        JOptionPane.showMessageDialog(null, infoMessage, titleBar, JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tblPagamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tblPagamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tblPagamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tblPagamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tblPagamentos().setVisible(true);
            }
        });
    }

    public void preencherBairros() {
        PerBairros perBairros = new PerBairros();
        ArrayList<ClsBairros> bairros = new PerBairros().TodosBairros();
        for (ClsBairros p : bairros) {
            cbxBairro.addItem(p.getNome());
        }
    }

    public void imprimir(String texto) {

        try {
            System.out.print(texto);
            InputStream prin = new ByteArrayInputStream(texto.getBytes());
            DocFlavor docFlavor = DocFlavor.INPUT_STREAM.AUTOSENSE;
            SimpleDoc documentoTexto = new SimpleDoc(prin, docFlavor, null);
            PrintService impressora = PrintServiceLookup.lookupDefaultPrintService();

            PrintRequestAttributeSet printerAttributes = new HashPrintRequestAttributeSet();
            printerAttributes.add(new JobName("Impressao", null));
            printerAttributes.add(OrientationRequested.PORTRAIT);
            printerAttributes.add(MediaSizeName.ISO_A4);

            DocPrintJob printJob = impressora.createPrintJob();

            try {
                printJob.print(documentoTexto, (PrintRequestAttributeSet) printerAttributes);
            } catch (PrintException e) {
                JOptionPane.showMessageDialog(null, "Não foi possível realizar a impressão!!", "Erro", JOptionPane.ERROR_MESSAGE);
            }

            prin.close();

        } catch (Exception e) {
            System.out.print(e);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOk;
    private javax.swing.JComboBox<String> cbxBairro;
    private javax.swing.JComboBox<String> cbxEmbalar;
    private javax.swing.JComboBox<String> cbxPagamento;
    private javax.swing.JComboBox<String> cbxRetirada;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lbPagamento;
    private javax.swing.JLabel lbRetirada;
    private javax.swing.JLabel lblBairro;
    private javax.swing.JLabel lblEmbalar;
    private javax.swing.JLabel lblEndereco;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblPagamento;
    private javax.swing.JLabel lblTaxa;
    private javax.swing.JLabel lblTelefone;
    private javax.swing.JLabel lblValPed;
    private javax.swing.JLabel lblValTotal;
    private javax.swing.JPanel pnlBack;
    private javax.swing.JFormattedTextField txtDATE;
    private javax.swing.JTextField txtEndereco;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtOutra;
    private javax.swing.JTextField txtResidencia;
    private javax.swing.JTextField txtTaxa;
    private javax.swing.JFormattedTextField txtTelefone;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables

}
