package Fronteira;

import Controle.ClsAcai;
import Controle.ClsComplemento;
import Controle.ClsVitamina;
import Persistencia.PerAcai;
import Persistencia.PerComplemento;
import Persistencia.PerVitamina;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.Graphics;
import java.awt.Image;
import java.util.Collections;
import java.util.Iterator;
import javax.swing.ImageIcon;

public class tblConfirmacao extends javax.swing.JFrame {

    double Vtotal = 0, Vsabor = 0, Vcomplemento = 0, Vtamanho = 0;
    InicioMDI inicio;

    List<String> prod = new ArrayList();
    List<String> sab = new ArrayList();
    List<String> tam = new ArrayList();
    List<String> comp = new ArrayList();
    List<String> obs = new ArrayList();
    List<String> val = new ArrayList();

    public tblConfirmacao() {
        initComponents();
    }

    public tblConfirmacao(List<String> produto_nome, List<String> sabor_nome, List<String> tamanho_nome, List<String> complementos, List<String> observacoes, List<String> valor, InicioMDI inicio1) {
        initComponents();

        inicio = inicio1;

        preencherSabor();
        preencherTamanho();
        preencherComplemento();

        prod = produto_nome;
        sab = sabor_nome;
        tam = tamanho_nome;
        comp = complementos;
        obs = observacoes;
        val = valor;

        //desabilitar componentes ao iniciar
        enableComponents();

        //listar todos os produtos adicionados
        setProducts(produto_nome, sabor_nome, tamanho_nome, complementos, observacoes, valor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBack = new javax.swing.JPanel(){
            public void paintComponent(Graphics g){
                ImageIcon im = new ImageIcon ("src\\Imagens\\back6.jpg");
                Image i = im.getImage();

                g.drawImage(i, 0, 0, this.getSize().width, this.getSize().height, this);
            }
        };
        lblPagamento = new javax.swing.JLabel();
        btnRemover = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        lblComplemento = new javax.swing.JLabel();
        cbbComplemento = new javax.swing.JComboBox<>();
        btnAdicionar = new javax.swing.JButton();
        btnRemoverComplemento = new javax.swing.JButton();
        lblTamanho = new javax.swing.JLabel();
        cbbTamanho = new javax.swing.JComboBox<>();
        lblSabor = new javax.swing.JLabel();
        cbbSabor = new javax.swing.JComboBox<>();
        lblObs = new javax.swing.JLabel();
        scrpnObs = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        btnVoltar = new javax.swing.JButton();
        btnFinalizar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        scrlTablePedidos = new javax.swing.JScrollPane();
        tblTableProdutos = new javax.swing.JTable();
        scrlTableComplementos = new javax.swing.JScrollPane();
        tblTableComplementos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Confirmação dos pedidos");
        setMaximumSize(new java.awt.Dimension(680, 550));
        setMinimumSize(new java.awt.Dimension(680, 550));
        setResizable(false);

        pnlBack.setBackground(new java.awt.Color(204, 204, 224));
        pnlBack.setEnabled(false);

        lblPagamento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPagamento.setText("Confirmação:");

        btnRemover.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnEditar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        lblComplemento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblComplemento.setText("Complemento:");

        cbbComplemento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbbComplemento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione:" }));

        btnAdicionar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnRemoverComplemento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoverComplemento.setText("Remover");
        btnRemoverComplemento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverComplementoActionPerformed(evt);
            }
        });

        lblTamanho.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTamanho.setText("Tamanho:");

        cbbTamanho.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbbTamanho.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione:" }));

        lblSabor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSabor.setText("Sabor:");

        cbbSabor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbbSabor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione:" }));

        lblObs.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblObs.setText("Observações: ");

        txtObs.setColumns(20);
        txtObs.setLineWrap(true);
        txtObs.setRows(5);
        scrpnObs.setViewportView(txtObs);

        btnVoltar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnFinalizar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnFinalizar.setText("Finalizar");
        btnFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarActionPerformed(evt);
            }
        });

        btnSalvar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSalvar.setText("Salvar alterações");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        tblTableProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Tamanho/Sabor", "Complemento", "Observações", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTableProdutos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblTableProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblTableProdutosMouseReleased(evt);
            }
        });
        scrlTablePedidos.setViewportView(tblTableProdutos);
        if (tblTableProdutos.getColumnModel().getColumnCount() > 0) {
            tblTableProdutos.getColumnModel().getColumn(0).setResizable(false);
            tblTableProdutos.getColumnModel().getColumn(0).setPreferredWidth(10);
            tblTableProdutos.getColumnModel().getColumn(1).setResizable(false);
            tblTableProdutos.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblTableProdutos.getColumnModel().getColumn(2).setPreferredWidth(200);
            tblTableProdutos.getColumnModel().getColumn(4).setResizable(false);
            tblTableProdutos.getColumnModel().getColumn(4).setPreferredWidth(15);
        }

        tblTableComplementos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Complemento"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTableComplementos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrlTableComplementos.setViewportView(tblTableComplementos);
        if (tblTableComplementos.getColumnModel().getColumnCount() > 0) {
            tblTableComplementos.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout pnlBackLayout = new javax.swing.GroupLayout(pnlBack);
        pnlBack.setLayout(pnlBackLayout);
        pnlBackLayout.setHorizontalGroup(
            pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBackLayout.createSequentialGroup()
                        .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBackLayout.createSequentialGroup()
                                .addGap(340, 340, 340)
                                .addComponent(btnRemoverComplemento))
                            .addComponent(scrlTableComplementos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlBackLayout.createSequentialGroup()
                                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTamanho)
                                    .addComponent(lblSabor)
                                    .addComponent(lblComplemento))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbbComplemento, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlBackLayout.createSequentialGroup()
                                        .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(cbbSabor, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbbTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnAdicionar)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                        .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackLayout.createSequentialGroup()
                                    .addGap(28, 28, 28)
                                    .addComponent(btnEditar)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnRemover))
                                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackLayout.createSequentialGroup()
                                        .addGap(49, 49, 49)
                                        .addComponent(btnSalvar))
                                    .addComponent(lblObs)
                                    .addComponent(scrpnObs, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlBackLayout.createSequentialGroup()
                                .addComponent(btnVoltar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnFinalizar))))
                    .addComponent(scrlTablePedidos)
                    .addGroup(pnlBackLayout.createSequentialGroup()
                        .addComponent(lblPagamento)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBackLayout.setVerticalGroup(
            pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblPagamento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrlTablePedidos, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemover)
                    .addComponent(btnEditar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlBackLayout.createSequentialGroup()
                        .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSabor)
                            .addComponent(cbbSabor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTamanho)
                            .addComponent(cbbTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblComplemento)
                            .addComponent(cbbComplemento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdicionar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scrlTableComplementos, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBackLayout.createSequentialGroup()
                        .addComponent(lblObs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrpnObs, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemoverComplemento)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(pnlBackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFinalizar)
                    .addComponent(btnVoltar))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // Adicionar complemento à lista
        String complemento = cbbComplemento.getSelectedItem().toString();

        DefaultTableModel model = (DefaultTableModel) tblTableComplementos.getModel();
        Vector row = new Vector();
        if (!complemento.equals("Selecione:")) {
            row.add(complemento);
            model.addRow(row);
        }

    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnRemoverComplementoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverComplementoActionPerformed
        // Remover complemento da tabela

        DefaultTableModel model = (DefaultTableModel) tblTableComplementos.getModel();
        int row = tblTableComplementos.getSelectedRow();
        if (row != -1) {
            model.removeRow(row);
        } else {
            infoBox("Selecione um complemento para remover", "Erro ao remover");
        }

    }//GEN-LAST:event_btnRemoverComplementoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // setar valores já selecionados

        //Variáveis para armazenar valores atuais das listas
        String produto_atual, sabor_atual, tamanho_atual, observacao_atual;
        List<String> complemento_atual;

        DefaultTableModel model1 = (DefaultTableModel) tblTableProdutos.getModel();
        int row1 = tblTableProdutos.getSelectedRow();
        if (row1 != -1) {

            //pegando valores
            produto_atual = tblTableProdutos.getValueAt(tblTableProdutos.getSelectedRow(), 0).toString();

            observacao_atual = tblTableProdutos.getValueAt(tblTableProdutos.getSelectedRow(), 3).toString();
            txtObs.setText(observacao_atual);

            if (produto_atual.equals("Açaí")) {
                //habilitando componentes
                enableComponents(true, false);

                //setando tamanho
                tamanho_atual = tblTableProdutos.getValueAt(tblTableProdutos.getSelectedRow(), 1).toString();
                cbbTamanho.setSelectedItem(tamanho_atual);
            } else {
                sabor_atual = tblTableProdutos.getValueAt(tblTableProdutos.getSelectedRow(), 1).toString();
                enableComponents(false, true);
                cbbSabor.setSelectedItem(sabor_atual);
            }

            //pegando complementos da tabela produtos
            complemento_atual = (List<String>) tblTableProdutos.getValueAt(tblTableProdutos.getSelectedRow(), 2);
            DefaultTableModel model = (DefaultTableModel) tblTableComplementos.getModel();

            //limpando tabela de complementos
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            //Setando tabela de complementos
            for (int i = 0; i < complemento_atual.size(); i++) {
                Vector row = new Vector();
                row.add(complemento_atual.get(i));
                model.addRow(row);
            }

            btnSalvar.setEnabled(true);
        } else {
            infoBox("Selecione um pedido para alterar", "Erro ao alterar");
        }

    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        //Removendo produto visualmente
        DefaultTableModel model = (DefaultTableModel) tblTableProdutos.getModel();
        int row = tblTableProdutos.getSelectedRow();
        int qntdrow = model.getRowCount();
        if (row != -1) {

            prod.remove(row);
            sab.remove(row);
            tam.remove(row);

            //remover complemento
            int cont = 0;
            for (Iterator<String> i = comp.iterator(); i.hasNext();) {
                String s = i.next();
                if (cont == row) {
                    i.remove();
                }
                if (s.equals("---")) {
                    cont++;
                }
            }

            obs.remove(row);
            val.remove(row);

            for (int i = qntdrow - 1; i >= 0; i--) {
                model.removeRow(i);
            }

        } else {
            infoBox("Selecione um pedido para remover", "Erro ao remover");
        }

        cbbComplemento.setSelectedIndex(0);
        cbbComplemento.setEnabled(false);
        cbbSabor.setSelectedIndex(0);
        cbbSabor.setEnabled(false);
        cbbTamanho.setSelectedIndex(0);
        cbbTamanho.setEnabled(false);

        txtObs.setText("");
        txtObs.setEnabled(false);

        model = (DefaultTableModel) tblTableComplementos.getModel();
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        setProducts(prod, sab, tam, comp, obs, val);

    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed

        String sabor = cbbSabor.getSelectedItem() + "";
        String acai = cbbTamanho.getSelectedItem() + "";

        //validação
        if (cbbSabor.isEnabled() == true) {
            if ((!"Selecione:".equals(sabor))) {
                PerVitamina perVit = new PerVitamina();
                ArrayList<ClsVitamina> vitamina = new PerVitamina().TodasVitaminas();
                for (ClsVitamina p : vitamina) {
                    if (sabor.equals(p.getTipo() + ": " + p.getNome())) {
                        Vsabor = p.getPreco();
                        Vtamanho = 0;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione um sabor");
                return;
            }
        }
        if (cbbTamanho.isEnabled() == true) {
            if ((!"Selecione:".equals(acai))) {
                PerAcai perAcai = new PerAcai();
                ArrayList<ClsAcai> acai2 = new PerAcai().TodosAcai();
                for (ClsAcai p : acai2) {
                    if (acai.equals(p.getTamanho())) {
                        Vtamanho = p.getPreco();
                        Vsabor = 0;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione um tamanho");
                return;
            }
        }

        //guardar os preços nas variaveis
        Vcomplemento = 0;
        int qntdrow1 = tblTableComplementos.getRowCount();
        if (qntdrow1 != -1) {
            for (int i = 0; i < qntdrow1; i++) {

                String complemento = tblTableComplementos.getValueAt(i, 0).toString();

                if (!"Selecione:".equals(complemento)) {
                    PerComplemento perComp = new PerComplemento();
                    ArrayList<ClsComplemento> comp = new PerComplemento().TodosComplemento();
                    for (ClsComplemento p : comp) {
                        if (complemento.equals(p.getNome())) {
                            Vcomplemento += p.getPreco();
                        }
                    }
                }
            }
        } else {
            Vcomplemento = 0;
        }

        Vtotal = Vsabor + Vcomplemento + Vtamanho;

        //alteração
        DefaultTableModel modelP = (DefaultTableModel) tblTableProdutos.getModel();
        int row = tblTableProdutos.getSelectedRow();

        String observacao = txtObs.getText();
        int cont = 0;

        sab.set(row, sabor);
        tam.set(row, acai);
        //complemento
        //int cont = 0;
        int pos = 0;
        for (; pos < comp.size(); pos++) {
            if (cont == row) {
                break;
            }

            if (comp.get(pos).equals("---")) {
                cont++;
            }

        }
        cont = 0;
        for (Iterator<String> i = comp.iterator(); i.hasNext();) {
            String s = i.next();
            if (s.equals("---")) {
                cont++;
            } else if (cont == row) {
                i.remove();
            }
        }

        obs.set(row, observacao);
        val.set(row, Vtotal + "");

        //List<String> complementos = new ArrayList<String>();
        for (int j = 0; j < tblTableComplementos.getRowCount(); j++) {
            comp.add(pos, tblTableComplementos.getValueAt(j, 0).toString());
        }

        //setar campos para 0
        cbbComplemento.setSelectedIndex(0);
        cbbComplemento.setEnabled(false);
        cbbSabor.setSelectedIndex(0);
        cbbSabor.setEnabled(false);
        cbbTamanho.setSelectedIndex(0);
        cbbTamanho.setEnabled(false);

        txtObs.setText("");
        txtObs.setEnabled(false);

        //limpar tabela produto
        int qntdrow = modelP.getRowCount();

        for (int p = qntdrow - 1; p >= 0; p--) {
            modelP.removeRow(p);
        }

        //limpar tabela complemento
        DefaultTableModel model = (DefaultTableModel) tblTableComplementos.getModel();
        int rowCount = model.getRowCount();
        for (int k = rowCount - 1; k >= 0; k--) {
            model.removeRow(k);
        }

        setProducts(prod, sab, tam, comp, obs, val);

    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarActionPerformed

        int qntdrow = tblTableProdutos.getRowCount();
        String sabor, tamanho, complemento;

        if (qntdrow < 1) {
            JOptionPane.showMessageDialog(null, "Não consta pedido na tabela, porfavor, faça um pedido");
        } else {

            double total = 0;
            for (int i = 0; i < qntdrow; i++) {

                total += Double.parseDouble(tblTableProdutos.getValueAt(i, 4) + "");

            }

            tblPagamentos pagamento = new tblPagamentos(prod, sab, tam, comp, obs, val, total);
            pagamento.setVisible(true);

            DefaultTableModel model;
            model = (DefaultTableModel) tblTableProdutos.getModel();
            int rowCount = model.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            inicio.dispose();

            this.dispose();
        }


    }//GEN-LAST:event_btnFinalizarActionPerformed

    private void tblTableProdutosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTableProdutosMouseReleased
        btnEditar.setEnabled(true);
        btnRemover.setEnabled(true);
    }//GEN-LAST:event_tblTableProdutosMouseReleased

    //desabilitar componentes ao iniciar
    private void enableComponents() {
        cbbComplemento.setEnabled(false);
        cbbSabor.setEnabled(false);
        cbbTamanho.setEnabled(false);
        btnAdicionar.setEnabled(false);
        btnRemoverComplemento.setEnabled(false);
        txtObs.setEnabled(false);
        btnSalvar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnRemover.setEnabled(false);
    }

    private void enableComponents(boolean acai, boolean vit) {
        // bloqueando componentes 
        cbbSabor.setEnabled(vit);
        cbbComplemento.setEnabled(true);
        cbbTamanho.setEnabled(acai);
        btnAdicionar.setEnabled(true);
        tblTableComplementos.setEnabled(true);
        btnRemoverComplemento.setEnabled(true);
        txtObs.setEnabled(true);

        if (acai == true) {
            cbbSabor.setSelectedIndex(0);
            cbbComplemento.setSelectedIndex(0);
        } else if (vit == true) {
            cbbComplemento.setSelectedIndex(0);
            cbbTamanho.setSelectedIndex(0);
        }

        //Deletar lista de complementos
        DefaultTableModel model = (DefaultTableModel) tblTableComplementos.getModel();
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }

    }

    //listar todos os produtos adicionados
    private void setProducts(List<String> produto, List<String> sabor, List<String> tamanho, List<String> complementos, List<String> observacoes, List<String> valor) {

        int qtd_produtos = produto.size(); //armazenando quantidade de produtos
        int cplmt = 0; //Variável para percorrer a quantidade de complementos, enquanto complemento for diferente de "---"

        //Tabela vazia
        DefaultTableModel model = (DefaultTableModel) tblTableProdutos.getModel();

        //Variáveis para armazenar valores atuais das listas
        String produto_atual, sabor_atual, tamanho_atual, observacao_atual, aux_complemento_atual;

        //Variavel do valor - pega da tabela anterior
        String valor_atual;

        //percorrendo todos produtos
        for (int i = 0; i < qtd_produtos; i++) {
            produto_atual = produto.get(i);
            sabor_atual = sabor.get(i);
            tamanho_atual = tamanho.get(i);
            observacao_atual = observacoes.get(i);
            valor_atual = valor.get(i);

            List<String> complemento_atual = new ArrayList<String>(); //complementos atuais

            //Verificar se é açaí ou vitamina
            if (produto_atual == "Vitamina") {
                aux_complemento_atual = complementos.get(cplmt);
                while (aux_complemento_atual != "---") {
                    complemento_atual.add(aux_complemento_atual);
                    cplmt++;
                    aux_complemento_atual = complementos.get(cplmt);
                }
                model.addRow(new Object[]{produto_atual, sabor_atual, complemento_atual, observacao_atual, valor_atual});
                //model.addRow(new Object[]{produto_atual, sabor_atual, tamanho_atual, observacao_atual, valor_atual});
                //cplmt ++;
            } else {
                aux_complemento_atual = complementos.get(cplmt);
                while (aux_complemento_atual != "---") {
                    complemento_atual.add(aux_complemento_atual);
                    cplmt++;
                    aux_complemento_atual = complementos.get(cplmt);
                }
                model.addRow(new Object[]{produto_atual, tamanho_atual, complemento_atual, observacao_atual, valor_atual});
            }

            cplmt++;

        }

    }

    private void infoBox(String infoMessage, String titleBar) {
        JOptionPane.showMessageDialog(null, infoMessage, titleBar, JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tblConfirmacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tblConfirmacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tblConfirmacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tblConfirmacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tblConfirmacao().setVisible(true);
            }
        });
    }

    public void preencherSabor() {
        PerVitamina perVit = new PerVitamina();
        ArrayList<ClsVitamina> vitamina = new PerVitamina().TodasVitaminas();
        for (ClsVitamina p : vitamina) {
            cbbSabor.addItem(p.getTipo() + ": " + p.getNome());
        }
    }

    public void preencherTamanho() {
        PerAcai perAca = new PerAcai();
        ArrayList<ClsAcai> acai = new PerAcai().TodosAcai();
        for (ClsAcai p : acai) {
            cbbTamanho.addItem(p.getTamanho() + "");
        }
    }

    public void preencherComplemento() {
        PerComplemento perCom = new PerComplemento();
        ArrayList<ClsComplemento> complemento = new PerComplemento().TodosComplemento();
        for (ClsComplemento p : complemento) {
            cbbComplemento.addItem(p.getNome() + "");
        }
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnFinalizar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnRemoverComplemento;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> cbbComplemento;
    private javax.swing.JComboBox<String> cbbSabor;
    private javax.swing.JComboBox<String> cbbTamanho;
    private javax.swing.JLabel lblComplemento;
    private javax.swing.JLabel lblObs;
    private javax.swing.JLabel lblPagamento;
    private javax.swing.JLabel lblSabor;
    private javax.swing.JLabel lblTamanho;
    private javax.swing.JPanel pnlBack;
    private javax.swing.JScrollPane scrlTableComplementos;
    private javax.swing.JScrollPane scrlTablePedidos;
    private javax.swing.JScrollPane scrpnObs;
    private javax.swing.JTable tblTableComplementos;
    private javax.swing.JTable tblTableProdutos;
    private javax.swing.JTextArea txtObs;
    // End of variables declaration//GEN-END:variables

}
